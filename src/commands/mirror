#!/usr/bin/perl
use strict;
use warnings;

my $tid;

BEGIN {
    $tid = $ENV{GL_TID} || 0;
    delete $ENV{GL_TID};
}

use lib $ENV{GL_LIBDIR};
use Gitolite::Rc;
use Gitolite::Common;
use Gitolite::Conf::Load;

=for usage
Usage 1:    gitolite mirror push <slave> <repo>
            gitolite mirror status <slave> <repo>
            gitolite mirror status all <repo>
            gitolite mirror status all all
Usage 2:    ssh git@master-server mirror push <slave> <repo>
            ssh git@master-server mirror status <slave> <repo>

Forces a push of one repo to one slave.

Usage 1 is directly on the master server.  Nothing is checked; if the slave
accepts it, the push happens, even if the slave is not in any slaves
option.  This is how you do delayed or lagged pushes to servers that do not
need real-time updates or have bandwidth/connectivity issues.

Usage 2 can be initiated by *any* user who has *any* gitolite access to the
master server, but it checks that the slave is in one of the slaves options
before doing the push.

MIRROR STATUS: The usage examples above show what can be done.  The 'status
all <repo>' usage checks the status of all the slaves defined for the given
repo.  The 'status all all' usage is special, in that it only prints a list of
repos that have *some* error, instead of dumping all the error info itself.

SERVER LIST: 'gitolite mirror list master <reponame>' and 'gitolite mirror
list slaves <reponame>' will show you the name of the master server, and list
the slave servers, for the repo.  They only work on the server command line
(any server), but not remotely (from a normal user).
=cut

usage() if not @ARGV or $ARGV[0] eq '-h';

_die "HOSTNAME not set" if not $rc{HOSTNAME};

my ( $cmd, $host, $repo ) = @ARGV;
$repo =~ s/\.git$//;
usage() if not $repo;

if ( $cmd eq 'push' ) {
    valid_slave( $host, $repo ) if exists $ENV{GL_USER};
    # will die if host not in slaves for repo

    trace( 1, "TID=$tid host=$host repo=$repo", "gitolite mirror push started" );
    _chdir( $rc{GL_REPO_BASE} );
    _chdir("$repo.git");

    if ( -f "gl-creator" ) {
        # try to propagate the wild repo, including creator name and gl-perms
        my $creator = `cat gl-creator`; chomp($creator);
        trace( 1, `cat gl-perms 2>/dev/null | ssh $host CREATOR=$creator perms -c \\'$repo\\' 2>/dev/null` );
    }

    my $errors = 0;
    my $glss = '';
    for (`git push --mirror $host:$repo 2>&1`) {
        $errors = 1 if $?;
        print STDERR "$_" if -t STDERR or exists $ENV{GL_USER};
        $glss .= $_;
        chomp;
        if (/FATAL/) {
            $errors = 1;
            gl_log( 'mirror', $_ );
        } else {
            trace( 1, "mirror: $_" );
        }
    }
    # save the mirror push status for this slave if the word 'fatal' is found,
    # else remove the status file.  We don't store "success" output messages;
    # you can always get those from the log files if you really need them.
    if ( $glss =~ /fatal/i ) {
        my $glss_prefix = Gitolite::Common::gen_ts() . "\t$ENV{GL_TID}\t";
        $glss =~ s/^/$glss_prefix/gm;
        _print("gl-slave-$host.status", $glss);
    } else {
        unlink "gl-slave-$host.status";
    }

    exit $errors;
} elsif ($cmd eq 'status') {
    if (not exists $ENV{GL_USER} and $repo eq 'all') {
        # this means 'gitolite mirror status all all'; in this case we only
        # return a list of repos that *have* status files (indicating some
        # problem).  It's upto you what you do with that list.  This is not
        # allowed to be run remotely; far too wide ranging, sorry.
        _chdir( $rc{GL_REPO_BASE} );
        my $phy_repos = list_phy_repos(1);
        for my $repo ( @{$phy_repos} ) {
            my @x = glob("$rc{GL_REPO_BASE}/$repo.git/gl-slave-*.status");
            print "$repo\n" if @x;
        }
        exit 0;
    }

    valid_slave( $host, $repo ) if exists $ENV{GL_USER};
    # will die if host not in slaves for repo

    _chdir( $rc{GL_REPO_BASE} );
    _chdir("$repo.git");

    $host = '*' if $host eq 'all';
    map { print_status($repo, $_) } sort glob("gl-slave-$host.status");
} else {
    # strictly speaking, we could allow some of the possible commands remotely
    # also, at least for admins.  However, these commands are mainly intended
    # for server-side scripting so I don't care.
    usage() if $ENV{GL_USER};

    server_side_commands(@ARGV);
}

# ----------------------------------------------------------------------

sub valid_slave {
    my ( $host, $repo ) = @_;
    _die "invalid repo '$repo'" unless $repo =~ $REPONAME_PATT;

    my %list = repo_slaves($repo);
    _die "'$host' not a valid slave for '$repo'" unless $list{$host};
}

sub repo_slaves {
    my $repo = shift;

    my $ref = git_config( $repo, "^gitolite-options\\.mirror\\.slaves.*" );
    my %list = map { $_ => 1 } map { split } values %$ref;

    return %list;
}

sub repo_master {
    my $repo = shift;

    my $ref = git_config( $repo, "^gitolite-options\\.mirror\\.master\$" );
    my @list = map { split } values %$ref;
    _die "'$repo' seems to have more than one master" if @list > 1;

    return $list[0] || '';
}

sub print_status {
    my $repo = shift;
    my $file = shift;
    return unless -f $file;
    my $slave = $1 if $file =~ /^gl-slave-(.+)\.status$/;
    print "----------\n";
    print "WARNING: previous mirror push of repo '$repo' to host '$slave' failed, status is:\n";
    print slurp($file);
    print "----------\n";
}

# ----------------------------------------------------------------------
# server side commands.  Very little error checking.
#   gitolite mirror list master <repo>
#   gitolite mirror list slaves <repo>
#   gitolite mirror remote-command <slave> <repo> <command> [<args>...]
#   gitolite mirror remote-command all <repo> <command> [<args>...]

# our own version of the backtick operators without letting the shell
# interfere.
#
# Usage:  backtick_no_shell(\*FH, command...)
# The STDOUT and STDERR of the command are merged into FH.
# There is no way to feed data to the command.
#
# command is treated as a list and passed to exec.

sub backtick_no_shell {
    my $fh = shift;

    trace( 1, 'backtick_no_shell', @_ );

    my $pid = open($fh, "-|");
    _die "unable to fork to run " . join(' ', @_) . ": $!" unless (defined $pid);

    return if ($pid);

    open STDERR, '>&STDOUT';
    trace( 1, 'exec', '{', $_[0], '}', @_ );
    (exec { $_[0] } @_) || _die "unable to exec " . join(' ', @_) . ": $!";
}

sub server_side_commands {
    if ( $cmd eq 'list' ) {
        if ( $host eq 'master' ) {
            say repo_master($repo);
        } elsif ( $host eq 'slaves' ) {
            my %list = repo_slaves($repo);
            say join( " ", sort keys %list );
        } else {
            _die "gitolite mirror list master|slaves <reponame>";
        }
    } elsif ( $cmd eq 'remote-command' ) {
        # skip past the 'remote-command', $host, and $repo args
        shift; shift; shift;

        # 'host' can be a single server name, 'slaves', 'master', 'all',
        # or 'all!'
        # With 'slaves', 'master', or 'all', this will execute on all
        # such servers _except_ the local server.
        # With a single server name, or with 'all!', that exception is
        # removed, and the local server will be called if named or part
        # of the slaves or master list.
        my @slaves = ();
        my $force = 0;
        if ($host eq 'master' or $host eq 'slaves' or $host eq 'all' or $host eq 'all!') {
            if ($host ne 'master') {
                my %slave_list = repo_slaves($repo);
                push(@slaves, keys %slave_list);
            }
            if ($host ne 'slaves') {
                push(@slaves, repo_master($repo));
            }
            $force = ($host eq 'all!');
        } else {
            push(@slaves, $host);
            $force = 1;
        }

        # for each listed server that is not the current host (or all
        # servers when $force is true), issue the remote gitolite command
        # via ssh.
        # We want to prefix the output with the slave name, which means
        # we can't use the system() call.  We want to capture both STDERR
        # and STDOUT, but we don't want to pass our command through the
        # shell in case it has shell special characters in it.  Therefore
        # we have to create our own version of the backtick operators that
        # don't use the shell.

        foreach my $s (@slaves) {
            if ($force or $s ne $rc{HOSTNAME}) {
                backtick_no_shell(\*REMOTE_EXEC, 'ssh', $s, @_);
                while (my $line = <REMOTE_EXEC>) {
                    chomp $line;
                    print "${s}: ${line}\n";
                }
                close(REMOTE_EXEC) || _die "remote execution of " . join(' ', 'ssh', $s, @_) . " failed: $!";
            }
        }
    } else {
        _die "invalid command";
    }
}
